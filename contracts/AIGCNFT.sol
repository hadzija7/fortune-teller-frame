// SPDX-License-Identifier: MIT
pragma solidity ^0.8.13;
import {IERC7007} from "./IERC7007.sol";
import {ERC721, IERC721, IERC721Metadata} from "@openzeppelin/contracts/token/ERC721/ERC721.sol";
import {IERC165} from "@openzeppelin/contracts/utils/introspection/IERC165.sol";

/**
*       DISCLAIMER: THIS SMART CONTRACT IS FOR DEMONSTRATION PURPOSES ONLY!
*                   IT IS NOT AUDITED!
*                   DO NOT USE IT IN PRODUCTION!
*/

/// @notice This contract allows users to mint AIGC NFTs
/// @dev Data generated by Onchain AI Oracle is used as a metadata for ERC721 token
contract AIGCNFT is IERC7007, ERC721 { //IERC165, ERC721 {

    struct AIGCData {
        bytes fortune;
        bytes imageCID; 
        address author;
    }

    uint256 public totalSupply;

    //prompt => aigcData
    mapping(bytes => AIGCData) public aigcData;

    //tokenId => prompt
    mapping(uint256 => bytes) public tokenIdToPrompt;

    //author => tokenIds
    mapping(address => uint256[]) public ownedTokens;

    function getOwnedTokens(address owner) public view returns (uint256[] memory){
        return ownedTokens[owner];
    }

    //prompt => tokenId
    mapping(bytes => uint256) public promptToTokenId;

    constructor() ERC721("On-chain AI Oracle", "OAO") {}

    function mint(string calldata prompt) internal {
        require(promptToTokenId[bytes(prompt)] == 0, "prompt is already minted");
        promptToTokenId[bytes(prompt)] = totalSupply;
        tokenIdToPrompt[totalSupply] = bytes(prompt);
        aigcData[bytes(prompt)].author = msg.sender;
        ownedTokens[msg.sender].push(totalSupply);
        _safeMint(msg.sender, totalSupply);
        totalSupply++;
    }

    function tokenURI(uint256 tokenId) public view override returns (string memory) {
        _requireOwned(tokenId);

        bytes memory prompt = tokenIdToPrompt[tokenId];

        bytes memory cid = aigcData[prompt].imageCID;

        string memory baseURI = "https://ipfs.io/ipfs/";
        return bytes(baseURI).length > 0 ? string.concat(baseURI, string(cid)) : "";
    }

    function supportsInterface(
        bytes4 interfaceId
    ) public view override(ERC721, IERC165) returns (bool) {
        return
            interfaceId == type(IERC165).interfaceId ||
            interfaceId == type(ERC721).interfaceId ||
            interfaceId == type(IERC721Metadata).interfaceId ||
            super.supportsInterface(interfaceId);
    }

    /**
     * @dev Add AIGC data to token at `tokenId` given `prompt`, `aigcData` and `proof`.
     *
     * Optional:
     * - `proof` should not include `aigcData` to save gas.
     * - verify(`prompt`, `aigcData`, `proof`) should return true for zkML scenario.
     */
    function addAigcData(
        uint256 tokenId,
        bytes calldata prompt,
        bytes calldata aigcData,
        bytes calldata proof
    ) external {}

    /**
     * @dev Verify the `prompt`, `aigcData` and `proof`.
     */
    function verify(
        bytes calldata prompt,
        bytes calldata aigcData,
        bytes calldata proof
    ) external view returns (bool success) {}
}